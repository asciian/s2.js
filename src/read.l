(ir::include "src/libstd.l")

(defun tokenize (str)
  (let ((op (RegExp "(\"(?:\\\\\"|[^\"])*\"|,@|[,'`()]|\\s)")))
    (defun sub (exp)
      (let ((br (new (RegExp "[^\\s]"))))
	(return-from sub (.test br exp))))
    (return-from tokenize
      (.filter (.split str op) sub))))

(defun readterm (tokens)
  (let ((result '()) (cnt 1))
    (while (or (eql (nth tokens 0) "'")
	       (eql (nth tokens 0) "`")
	       (eql (nth tokens 0) ",")
	       (eql (nth tokens 0) ",@"))
      (.push result (.shift tokens)))
    (when (eql (nth tokens 0) "(")
      (.push result (.shift tokens))
      (while (< 0 cnt)
	(.push result (.shift tokens))
	(case (nth result (- (.-length result) 1))
	  (("(") (++ cnt))
	  ((")") (-- cnt))))
      (return-from readterm result))
    (.push result (.shift tokens))
    (return-from readterm result)))

(defun parse (tokens)
  (when (eql 0 (.-length tokens)) (return-from parse '()))
  (let ((exp (readterm tokens)))
    (case (nth exp 0)
      (("'")  (return-from parse (.concat `((ir::quote     ,@(parse (.slice exp 1)))) (parse tokens))))
      (("`")  (return-from parse (.concat `((ir::backquote ,@(parse (.slice exp 1)))) (parse tokens))))
      ((",")  (return-from parse (.concat `((,@(list 'ir::unquote)   ,@(parse (.slice exp 1)))) (parse tokens))))
      ((",@") (return-from parse (.concat `((,@(list 'ir::splice)    ,@(parse (.slice exp 1)))) (parse tokens))))
      (("(")  (return-from parse (.concat (list (parse (.slice exp 1 -1))) (parse tokens))))
      (otherwise (return-from parse (.concat (list (nth exp 0)) (parse tokens)))))))

(defun read (str)
  (return-from read
    (parse (tokenize str)))
  (return-from read
    (nth (parse (tokenize str)) 0)))
